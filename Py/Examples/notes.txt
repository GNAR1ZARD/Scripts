Common Python Keywords for Scripting
import: To include external libraries/modules.

import os
import sys
with: Commonly used for file handling or managing resources.

with open("example.txt", "r") as file:
    print(file.read())
try, except, finally: For error handling.

try:
    file = open("example.txt", "r")
except FileNotFoundError:
    print("File not found!")
finally:
    file.close()
sys.argv: Access command-line arguments.

import sys
print("Script name:", sys.argv[0])
if len(sys.argv) > 1:
    print("Arguments passed:", sys.argv[1:])
Libraries for Scripting Tasks
To access internal resources or perform scripting-related tasks, Python provides robust libraries. Some popular ones are:

#######################################################
1. os: Interact with the Operating System
Navigate the file system, run commands, or manage environment variables.

import os

# Get current working directory
print(os.getcwd())

# List files in a directory
print(os.listdir())

# Execute a system command
os.system("echo 'Hello, World!'")

################################################
2. sys: System-Specific Parameters
Access command-line arguments or control Pythonâ€™s runtime environment.

import sys

# Get Python version
print(sys.version)

# Exit script
sys.exit(0)

###################################################
3. subprocess: Execute Shell Commands
A more robust way to run shell commands and capture their output.

import subprocess

result = subprocess.run(["ls", "-l"], capture_output=True, text=True)
print(result.stdout)

#####################################################
4. shutil: File Operations
Copy, move, or delete files and directories.

import shutil

# Copy a file
shutil.copy("source.txt", "destination.txt")

########################################################
5. argparse: Command-Line Argument Parsing
For creating user-friendly CLI tools.

import argparse

parser = argparse.ArgumentParser(description="A sample script.")
parser.add_argument("filename", help="Name of the file to process")
args = parser.parse_args()

print(f"Processing file: {args.filename}")

#############################################################
6. datetime: Work with Dates and Times
from datetime import datetime

now = datetime.now()
print("Current Time:", now.strftime("%Y-%m-%d %H:%M:%S"))

###############################################
7. socket: Networking Tasks
Build scripts for basic networking like creating a server or client.
import socket

hostname = socket.gethostname()
ip_address = socket.gethostbyname(hostname)
print(f"Hostname: {hostname}, IP: {ip_address}")

########################################################
8. json & yaml: Handle Configuration Files
Read/write configuration data in JSON or YAML format.

import json

config = {"user": "Ryan", "role": "Cybersecurity"}
with open("config.json", "w") as file:
    json.dump(config, file)
Best Practices for Python Scripting
Use Shebang (for Unix-like systems): Add #!/usr/bin/env python3 at the top of your script to specify the Python interpreter.

Make Scripts Executable:

Change permissions: chmod +x script.py
Run directly: ./script.py
Environment Variables: Access or set environment variables using os or dotenv libraries.

import os

# Get environment variable
print(os.getenv("HOME"))

# Set environment variable
os.environ["MY_VAR"] = "value"
Virtual Environments:

Use venv to isolate dependencies for your scripts.
#########################################################################
Python provides several ways to look up the functionality of modules like os. 
These tools are similar to Linux's man pages or help command.

1. Using the help() Function
The help() function provides detailed documentation about a module or its functions.

Example: Exploring the os Module
import os
help(os)

Example: Exploring a Specific Function
help(os.getcwd)

Output Example:
Help on function getcwd in module os:

getcwd()
    Return a string representing the current working directory.


2. Using pydoc in the Command Line
The pydoc tool generates Python documentation directly in your terminal.

Example: Full Documentation for os

Run the following command in your terminal:
python -m pydoc os

Example: Specific Function Documentation
python -m pydoc os.getcwd
##########################################################